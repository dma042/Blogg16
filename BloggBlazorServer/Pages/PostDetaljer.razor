@page "/post/{PostId:int}"
@using BloggBlazorServer.Models
@using BloggBlazorServer.Services
@inject HttpClient httpClient
@inject UserStateService UserStateService
@inject IJSRuntime JS


@if (post != null)
{
    <h3>@post?.Tittel</h3>
    <div class="post-content-box">
        <p>@post?.Innhold</p>
    </div>
}
else
{
    <p>Innlegg ikke funnet.</p>
}
<div class="comment-box">
    <EditForm Model="@newComment" OnValidSubmit="@LeggTilKommentar">
        <textarea @bind="newComment.Innhold" placeholder="Skriv en kommentar..."></textarea>
        <button type="submit" class="btn btn-primary">Publiser Kommentar</button>
    </EditForm>
    @if (!string.IsNullOrEmpty(submissionMessage))
    {
        <p class="@submissionMessageClass">@submissionMessage</p>
    }
</div>



@if (kommentarer != null)
{
    foreach (var kommentar in kommentarer)
    {
        <div class="comment-entry">
            <p><strong>@kommentar.ForfatterNavn:</strong> @kommentar.Innhold (@kommentar.Opprettet.ToString("yyyy-MM-dd HH:mm"))</p>
            @if (kommentar.ForfatterId == UserStateService.CurrentUserId)
            {
                <button @onclick="() => SlettKommentar(kommentar)" class="btn btn-danger">Slett</button>
            }
        </div>
    }
}


@code {
    [Parameter]
    public int PostId { get; set; }

    private Post post;
    private Kommentar newComment = new Kommentar();
    private List<Kommentar> kommentarer;

    protected override async Task OnInitializedAsync()
    {
        post = await httpClient.GetFromJsonAsync<Post>($"api/post/{PostId}");
        kommentarer = await httpClient.GetFromJsonAsync<List<Kommentar>>($"api/kommentar/post/{PostId}");
        foreach (var kommentar in kommentarer)
        {
            try
            {
                var forfatter = await httpClient.GetFromJsonAsync<UserList.UserModel>("api/auth/user/" + kommentar.ForfatterId);
                kommentar.ForfatterNavn = forfatter?.UserName;
            }
            catch (HttpRequestException ex)
            {
                Console.WriteLine($"Feil ved henting av brukerdata for {kommentar.ForfatterId}: {ex.Message}");
                kommentar.ForfatterNavn = "Ukjent bruker";
            }
        }

    }

    private string submissionMessage = "";
    private string submissionMessageClass = "";

    private async Task LeggTilKommentar()
    {
        try
        {
            newComment.PostId = PostId;
            newComment.ForfatterId = UserStateService.CurrentUserId;

            var response = await httpClient.PostAsJsonAsync("api/kommentar", newComment);
            if (response.IsSuccessStatusCode)
            {
                var lagtTilKommentar = await response.Content.ReadFromJsonAsync<Kommentar>();

                var forfatter = await httpClient.GetFromJsonAsync<UserList.UserModel>("api/auth/user/" + lagtTilKommentar.ForfatterId);
                lagtTilKommentar.ForfatterNavn = forfatter?.UserName ?? "Ukjent bruker";
                lagtTilKommentar.Opprettet = DateTime.Now;

                kommentarer.Add(lagtTilKommentar);
                newComment = new Kommentar();
                submissionMessage = "Kommentaren ble publisert.";
                submissionMessageClass = "text-success";
            }
            else
            {
                var errorResponse = await response.Content.ReadAsStringAsync();
                submissionMessage = $"Det oppstod en feil under publisering av kommentaren: {errorResponse}";
                submissionMessageClass = "text-danger";
            }
        }
        catch (Exception ex)
        {
            submissionMessage = $"Unntak ved publisering av kommentar: {ex.Message}";
            submissionMessageClass = "text-danger";
        }
    }

    private async Task SlettKommentar(Kommentar kommentar)
    {
        var bekreftelse = await JS.InvokeAsync<bool>("confirm", "Er du sikker på at du vil slette denne kommentaren?");
        if (bekreftelse)
        {
            var response = await httpClient.DeleteAsync($"api/kommentar/{kommentar.KommentarId}");

            if (response.IsSuccessStatusCode)
            {
                kommentarer.Remove(kommentar);
            }
            else
            {
                var errorResponse = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Feil ved sletting av kommentaren: {errorResponse}");
            }
        }
    }





    public class Kommentar
    {
        public int KommentarId { get; set; }
        public string Innhold { get; set; }
        public int PostId { get; set; }
        public string ForfatterId { get; set; }
        public string ForfatterNavn { get; set; }
        public DateTime Opprettet { get; set; }
    }
}
