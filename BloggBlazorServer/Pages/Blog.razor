@page "/min-blogg"
@using BloggBlazorServer.Services
@using Newtonsoft.Json
@using System.Net.Http.Headers
@using BloggBlazorServer.Models
@inject NavigationManager NavigationManager
@inject HttpClient httpClient
@inject UserStateService UserStateService
@inject HttpClient Http
@inject IJSRuntime JS

<style>
    .container {
        max-width: 800px;
        margin: auto;
        padding: 20px;
    }

    h3 {
        text-align: center;
        color: #007bff;
    }

  
    .post-container {
        display: flex;
        flex-direction: column;
        border: 1px solid #ddd;
        padding: 20px;
        margin-bottom: 20px;
        background-color: #f9f9f9;
        border-radius: 5px;
        transition: box-shadow 0.2s;
    }

        .post-container:hover {
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }

    .post-title {
        font-weight: bold;
        margin-bottom: 10px;
    }

    .post-content {
        margin-bottom: 20px;
    }

    .image-preview {
        width: 100%;
        height: auto;
        margin-bottom: 10px;
        border-radius: 5px;
    }

 
    .btn {
        padding: 10px 15px;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.2s;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
        border: none;
    }

        .btn-primary:hover {
            background-color: #0056b3;
        }

    .btn-danger {
        background-color: #dc3545;
        color: white;
        border: none;
    }

        .btn-danger:hover {
            background-color: #c82333;
        }


    .edit-form-container {
        background-color: #f9f9f9;
        padding: 20px;
        border-radius: 5px;
        border: 1px solid #ddd;
        margin-bottom: 30px;
    }

        .edit-form-container div {
            margin-bottom: 20px;
        }

    .input-text, .input-textarea {
        width: 100%;
        padding: 10px;
        border-radius: 5px;
        border: 1px solid #ddd;
    }

        .input-text:focus, .input-textarea:focus {
            outline: none;
            border-color: #007bff;
        }
</style>

<div class="container">
    <h3>Min Blogg</h3>

@if (isLoading)
{
    <p>Laster blogginnhold...</p>
}
else if (UserStateService.IsLoggedIn)
{
    <div class="welcome-text">Velkommen til din blogg, @currentUser?.UserName!</div>

    @if (blog != null)
    {
        <div class="button-container">
            <a href="configure-blog" class="btn btn-primary">Endre Blogg</a>
        </div>
        <div>
            <div class="label-heading">Tittel:</div>
            <div class="info-text">@blog.Tittel</div>
        </div>
        <div>
            <div class="label-heading">Beskrivelse:</div>
            <div class="info-text">@blog.Beskrivelse</div>
        </div>

        <EditForm Model="@newPost" OnValidSubmit="HandleSubmit" class="edit-form-container">
            <div>
                <InputText id="title" @bind-Value="newPost.Tittel" placeholder="Tittel på innlegg" />
            </div>
            <div>
                <InputTextArea id="content" @bind-Value="newPost.Innhold" placeholder="Innhold i innlegget" />
            </div>
            <div>
                <InputFile OnChange="@OnInputFileChange" multiple />
            </div>
            <div>
                <button type="submit" class="btn btn-primary">Publiser Innlegg</button>
            </div>
        </EditForm>

        @if (!string.IsNullOrEmpty(submissionMessage))
        {
            <p class="text-success">@submissionMessage</p>
        }

    }
    else
    {
        <p>Du har ikke opprettet en blogg ennå.</p>
    }
}
else
{
    <p>Du må være logget inn for å se din blogg.</p>
}

@if (blog?.Posts?.Count > 0)
{
    <h4>Innlegg i Bloggen</h4>
    @foreach (var post in blog.Posts)
    {
        <div class="post-container" @onclick="() => GåTilPost(post.PostId)">
            <h5>@post.Tittel</h5>
            <p>@post.Innhold</p>
            <img src="api/image/@GetStoredFileName(post.Tittel)" alt="Image" class="image-preview" />
            <button @onclick="() => DeletePost(post.PostId)" class="btn btn-danger">Slett</button>
        </div>
    }
}
else
{
    <p>Ingen innlegg funnet for denne bloggen.</p>
}


</div>

@code {
    private Blogg blog;
    private UserModel currentUser;
    private PostModel newPost = new PostModel();
    private bool isLoading = true;
    private string submissionMessage;
    private string submissionMessageClass;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        if (UserStateService.IsLoggedIn)
        {
            try
            {
                var userId = UserStateService.CurrentUserId;
                currentUser = await httpClient.GetFromJsonAsync<UserModel>($"api/auth/user/{userId}");
                var response = await httpClient.GetAsync($"https://localhost:7018/api/Blogg/user/{userId}");

                if (response.IsSuccessStatusCode)
                {
                    var content = await response.Content.ReadAsStringAsync();
                    blog = JsonConvert.DeserializeObject<Blogg>(content);
                }
                else
                {
                    Console.WriteLine("Feil ved henting av blogg: Responsen var ikke vellykket.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Feil ved henting av blogg: {ex.Message}");
            }
        }
        if (blog != null)
        {
            try
            {
                var postResponse = await httpClient.GetAsync($"api/Post/blog/{blog.BloggId}");
                if (postResponse.IsSuccessStatusCode)
                {
                    var postData = await postResponse.Content.ReadAsStringAsync();
                    blog.Posts = JsonConvert.DeserializeObject<List<PostModel>>(postData);
                }
                else
                {
                    Console.WriteLine("Feil ved henting av innlegg.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Feil ved henting av innlegg: {ex.Message}");
            }
        }

        await FetchPosts();
        isLoading = false;
    }

    private async Task HandleSubmit()
    {
        var postToCreate = new
        {
            Tittel = newPost.Tittel,
            Innhold = newPost.Innhold,
            BloggId = blog.BloggId,
        };

        var response = await httpClient.PostAsJsonAsync("api/Post", postToCreate);


        if (response.IsSuccessStatusCode)
        {
            submissionMessage = "Innlegget ble opprettet suksessfullt.";
            submissionMessageClass = "text-success";
            newPost = new PostModel();
            await FetchPosts();

        }
        else
        {
            var errorResponse = await response.Content.ReadAsStringAsync();
            submissionMessage = $"Det oppstod en feil under opprettelse av innlegget: {errorResponse}";
            submissionMessageClass = "text-danger";
        }

    }
    private async Task FetchPosts()
    {
        var postResponse = await httpClient.GetAsync($"api/Post/blog/{blog.BloggId}");
        if (postResponse.IsSuccessStatusCode)
        {
            var postData = await postResponse.Content.ReadAsStringAsync();
            blog.Posts = JsonConvert.DeserializeObject<List<PostModel>>(postData);
        }

    }

    private async Task DeletePost(int postId)
    {
        bool confirmDelete = await JS.InvokeAsync<bool>("confirm", "Er du sikker på at du vil slette dette innlegget?");
        if (confirmDelete)
        {

            var response = await httpClient.DeleteAsync($"api/Post/{postId}");
            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo($"/temporary-redirect/{NavigationManager.Uri}");
            }
            else
            {
            }
        }
    }

    private void GåTilPost(int postId)
    {
        NavigationManager.NavigateTo($"/post/{postId}");
    }


    





    public class PostModel
    {
        public int PostId { get; set; }
        public string Tittel { get; set; }
        public string Innhold { get; set; }
        public DateTime Opprettet { get; set; }
        public string Tags { get; set; }
    }



    public class Blogg
    {
        public int BloggId { get; set; }
        public string Tittel { get; set; }
        public string Beskrivelse { get; set; }
        public List<PostModel> Posts { get; set; }
    }

    public class UserModel
    {
        public string Id { get; set; }
        public string UserName { get; set; }
        public string Email { get; set; }
    }
}

@code {
    private int maxAllowedFiles = int.MaxValue;
    private long maxFileSize = long.MaxValue;
    private List<string> fileNames = new();
    private List<UploadResult> uploadResults = new();

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        using var content = new MultipartFormDataContent();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

            fileNames.Add(file.Name);

            content.Add(
                content: fileContent,
                name: "\"files\"",
                fileName: file.Name);
        }

        var response = await Http.PostAsync("/api/File", content);
        var newUploadResults = await response.Content.ReadFromJsonAsync<List<UploadResult>>();

        if (newUploadResults is not null)
        {
            uploadResults = uploadResults.Concat(newUploadResults).ToList();
        }
    }

    private string? GetStoredFileName(string fileName)
    {
        var uploadResult = uploadResults.SingleOrDefault(f => f.FileName == fileName);
        if (uploadResult is not null)
            return uploadResult.StoredFileName;

        return "File not found.";
    }


}